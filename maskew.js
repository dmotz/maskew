// Generated by CoffeeScript 1.12.7
(function() {
  var Maskew, PI, abs, cos, css, getMetric, hasSupport, key, max, prefixList, rad, ref, round, sin, testEl, testProp, transform, value,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  cos = Math.cos, sin = Math.sin, PI = Math.PI, abs = Math.abs, round = Math.round, max = Math.max;

  rad = function(deg) {
    return deg * PI / 180;
  };

  getMetric = function(style, key) {
    return parseInt(style[key], 10);
  };

  transform = function(y, angle) {
    return "translate3d(0, " + y + "px, 0) rotate3d(0, 0, 1, " + angle + "deg)";
  };

  testProp = function(prop) {
    var i, key, len, prefix;
    if (prop in testEl.style) {
      return prop;
    }
    for (i = 0, len = prefixList.length; i < len; i++) {
      prefix = prefixList[i];
      if ((key = prefix + prop.charAt(0).toUpperCase() + prop.slice(1)) in testEl.style) {
        return key;
      }
    }
    return false;
  };

  hasSupport = true;

  testEl = document.createElement('div');

  prefixList = ['Webkit', 'Moz', 'ms'];

  css = new function() {
    var i, key, len, ref;
    ref = 'transform transformOrigin transformStyle'.split(' ');
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      this[key] = key;
    }
    return this;
  };

  for (key in css) {
    value = css[key];
    css[key] = testProp(value);
    if (!css[key]) {
      hasSupport = false;
      break;
    }
  }

  Maskew = (function() {
    function Maskew(_el, angle1, _options) {
      var base, base1, base2, base3, contents, elStyle, fn1, i, j, l, len, len1, len2, ref, side, xMetrics, yMetrics;
      this._el = _el;
      this.angle = angle1;
      this._options = _options != null ? _options : {};
      this._onTouchLeave = bind(this._onTouchLeave, this);
      this._onTouchEnd = bind(this._onTouchEnd, this);
      this._onTouchMove = bind(this._onTouchMove, this);
      this._onTouchStart = bind(this._onTouchStart, this);
      this.destroy = bind(this.destroy, this);
      this.skew = bind(this.skew, this);
      if (!hasSupport) {
        return;
      }
      if (!(this instanceof Maskew)) {
        return new Maskew(this._el, this.angle, this._options);
      }
      if (typeof this._el === 'string') {
        this._el = document.querySelector(this._el);
      }
      (base = this._options).touch || (base.touch = false);
      (base1 = this._options).anchor || (base1.anchor = 'top');
      (base2 = this._options).showElement || (base2.showElement = false);
      (base3 = this._options).className || (base3.className = 'maskew');
      contents = this._el.cloneNode(true);
      elStyle = window.getComputedStyle(this._el);
      xMetrics = ['width', 'paddingLeft', 'paddingRight', 'borderLeftWidth', 'borderRightWidth'];
      yMetrics = ['height', 'paddingTop', 'paddingBottom', 'borderTopWidth', 'borderBottomWidth'];
      this._width = this._height = 0;
      for (i = 0, len = xMetrics.length; i < len; i++) {
        key = xMetrics[i];
        this._width += getMetric(elStyle, key);
      }
      for (j = 0, len1 = yMetrics.length; j < len1; j++) {
        key = yMetrics[j];
        this._height += getMetric(elStyle, key);
      }
      this._outerMask = document.createElement('div');
      this._outerMask.style.padding = '0';
      this._outerMask.style.width = this._width + 'px';
      this._outerMask.style.height = this._height + 'px';
      this._outerMask.style.overflow = 'hidden';
      if (this._options.showElement) {
        this._el.style.display = 'block';
        this._outerMask.style.display = this._options.showElement;
      } else {
        this._outerMask.style.display = elStyle.display;
      }
      this._innerMask = this._outerMask.cloneNode(false);
      this._innerMask.style[css.transformOrigin] = 'bottom left';
      this._holder = this._outerMask.cloneNode(false);
      this._holder.style[css.transformOrigin] = 'inherit';
      ref = ['Top', 'Right', 'Bottom', 'Left'];
      fn1 = (function(_this) {
        return function(key) {
          return _this._outerMask.style[key] = elStyle[key];
        };
      })(this);
      for (l = 0, len2 = ref.length; l < len2; l++) {
        side = ref[l];
        fn1('margin' + side);
      }
      this._el.style.margin = '0';
      this._el.parentNode.insertBefore(this._outerMask, this._el);
      this._holder.appendChild(this._el);
      this._innerMask.appendChild(this._holder);
      this._outerMask.appendChild(this._innerMask);
      this._outerMask.className = this._options.className;
      if (this._options.touch) {
        this.setTouch(true);
      }
      this.skew(this.angle);
    }

    Maskew.prototype.skew = function(angle) {
      var adj, cosine, hyp, opp, rads, sine, tlX, tlY, yOffset;
      if (angle == null) {
        angle = this._dragAngle || 0;
      }
      if (angle < 0) {
        angle = 0;
      }
      sine = sin(rads = rad(angle));
      cosine = cos(rads);
      tlX = this._height * sine;
      tlY = this._height * cosine;
      adj = max(0, this._width - tlX);
      hyp = adj / cosine;
      opp = sine * hyp;
      yOffset = round(this._height - tlY + opp);
      this._outerMask.style.height = round(tlY - opp) + 'px';
      this._innerMask.style.width = round(hyp) + 'px';
      this._innerMask.style[css.transform] = transform(-yOffset, angle);
      this._holder.style[css.transform] = transform(0, -angle);
      if (this._options.anchor === 'bottom') {
        this._el.style[css.transform] = transform(yOffset, 0);
      }
      return this;
    };

    Maskew.prototype.setTouch = function(toggle) {
      var eString, eventPair, eventPairs, fn1, i, j, len, len1, listenFn;
      if (toggle) {
        if (this._touchEnabled) {
          return;
        }
        listenFn = 'addEventListener';
        this._outerMask.style.cursor = 'ew-resize';
        this._touchEnabled = true;
      } else {
        if (!this._touchEnabled) {
          return;
        }
        listenFn = 'removeEventListener';
        this._outerMask.style.cursor = 'default';
        this._touchEnabled = false;
      }
      eventPairs = [['TouchStart', 'MouseDown'], ['TouchMove', 'MouseMove'], ['TouchEnd', 'MouseUp'], ['TouchLeave', 'MouseOut']];
      for (i = 0, len = eventPairs.length; i < len; i++) {
        eventPair = eventPairs[i];
        fn1 = (function(_this) {
          return function(fn) {
            return _this._outerMask[listenFn](eString.toLowerCase(), _this[fn], false);
          };
        })(this);
        for (j = 0, len1 = eventPair.length; j < len1; j++) {
          eString = eventPair[j];
          fn1('_on' + eventPair[0]);
        }
      }
      return this;
    };

    Maskew.prototype.destroy = function() {
      var k, parent;
      parent = this._outerMask.parentNode;
      parent.insertBefore(this._el, this._outerMask);
      parent.removeChild(this._outerMask);
      if ($) {
        $.data(this._el, 'maskew', null);
      }
      for (k in this) {
        this[k] = null;
      }
      return null;
    };

    Maskew.prototype._onTouchStart = function(e) {
      e.preventDefault();
      this._touchStarted = true;
      if (e.type === 'mousedown') {
        this._x1 = e.pageX;
      } else if (e.type === 'touchstart') {
        this._x1 = e.touches[0].pageX;
      }
      return this._xDelta = 0;
    };

    Maskew.prototype._onTouchMove = function(e) {
      if (!this._touchStarted) {
        return;
      }
      e.preventDefault();
      if (e.type === 'mousemove') {
        this._xDelta = e.pageX - this._x1;
      } else if (e.type === 'touchmove') {
        this._xDelta = e.touches[0].pageX - this._x1;
      }
      this._dragAngle = this.angle + this._xDelta / abs(3 + this._xDelta / this._width);
      return this.skew();
    };

    Maskew.prototype._onTouchEnd = function() {
      this._touchStarted = false;
      return this.angle = this._dragAngle || this.angle;
    };

    Maskew.prototype._onTouchLeave = function() {
      return this._onTouchEnd();
    };

    Maskew.VERSION = '0.1.7';

    Maskew.isSupported = hasSupport;

    return Maskew;

  })();

  if ((window.jQuery != null) || (((ref = window.$) != null ? ref.data : void 0) != null)) {
    $.prototype.maskew = function(angle, options) {
      var el, i, instance, j, len, len1, ref1, ref2;
      if (!hasSupport) {
        return this;
      }
      if (typeof angle === 'object') {
        options = angle;
        angle = 0;
      } else if (typeof angle === 'string') {
        ref1 = this;
        for (i = 0, len = ref1.length; i < len; i++) {
          el = ref1[i];
          if (!(instance = $.data(el, 'maskew'))) {
            return this;
          }
          if (typeof instance[angle] !== 'function') {
            return this;
          }
          instance[angle].call(instance, options);
        }
        return this;
      }
      ref2 = this;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        el = ref2[j];
        if (instance = $.data(el, 'maskew')) {
          return instance;
        }
        $.data(el, 'maskew', new Maskew(el, angle, options));
      }
      return this;
    };
  }

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = Maskew;
  } else if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(function() {
      return Maskew;
    });
  } else {
    window.Maskew = Maskew;
  }

}).call(this);

//# sourceMappingURL=maskew.js.map
