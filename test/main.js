// Generated by CoffeeScript 1.12.7
(function() {
  var cleanStyle, dirtyStyle, getRotation, getY, originalParent, styleFetcher, testClass, testDiv, testDiv2, testMaskew, testPresence, transformKey;

  styleFetcher = function(el) {
    return (function(style) {
      var k, ref, v;
      ref = window.getComputedStyle(el);
      for (k in ref) {
        v = ref[k];
        style[k] = v;
      }
      return function(key) {
        return style[key];
      };
    })({});
  };

  getRotation = function(el) {
    var ref;
    return parseFloat((ref = el.style[transformKey].match(/(-?\d+)deg/i)) != null ? ref[0] : void 0);
  };

  getY = function(el) {
    var ref;
    return parseFloat((ref = el.style[transformKey].match(/translate3d\(\d+px\,\s?(-?\d+)px/i)) != null ? ref[1] : void 0);
  };

  testPresence = function(el) {
    while (el = el.parentNode) {
      if (el === document) {
        return true;
      }
    }
    return false;
  };

  testDiv = document.createElement('div');

  testDiv.className = 'maskew-test';

  transformKey = (function() {
    var i, key, len, prefix, ref;
    if (testDiv.style.transform != null) {
      return 'transform';
    }
    ref = ['Webkit', 'Moz', 'ms'];
    for (i = 0, len = ref.length; i < len; i++) {
      prefix = ref[i];
      if (testDiv.style[(key = prefix + 'Transform')] != null) {
        return key;
      }
    }
  })();

  testDiv.style.width = testDiv.style.height = '200px';

  testDiv.style.margin = testDiv.style.padding = '20px';

  testDiv.style.backgroundColor = '#fff';

  testDiv2 = testDiv.cloneNode(false);

  testDiv2.className = testClass = 'maskew-test2';

  document.body.appendChild(testDiv);

  document.body.appendChild(testDiv2);

  originalParent = testDiv.parentNode;

  cleanStyle = styleFetcher(testDiv);

  testMaskew = new Maskew(testDiv);

  dirtyStyle = styleFetcher(testMaskew._outerMask);

  describe('Maskew', function() {
    describe('#constructor()', function() {
      it('should return an instance of Maskew', function() {
        return expect(testMaskew instanceof Maskew).to.equal(true);
      });
      it('should correctly return an object when not called with `new`', function() {
        return expect(Maskew(testDiv2) instanceof Maskew).to.equal(true);
      });
      it('should accept selector strings and use their elements', function() {
        return expect((new Maskew('.' + testClass))._el).to.equal(testDiv2);
      });
      it('should insert an element into the document', function() {
        return expect(testPresence(testMaskew._outerMask)).to.equal(true);
      });
      it('should insert an element in the same place as the target', function() {
        return expect(testMaskew._outerMask.parentNode).to.equal(originalParent);
      });
      it('should create an element of the same dimensions', function() {
        expect(dirtyStyle('width')).to.equal(testDiv.clientWidth + 'px');
        return expect(dirtyStyle('height')).to.equal(testDiv.clientHeight + 'px');
      });
      return it('should create an element with the same margins and padding', function() {
        var i, len, margin, padding, ref, results, side;
        ref = ['Top', 'Right', 'Bottom', 'Left'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          side = ref[i];
          margin = 'margin' + side;
          padding = 'padding' + side;
          expect(dirtyStyle(margin)).to.equal(cleanStyle(margin));
          results.push(expect(testMaskew._el.style[padding]).to.equal(cleanStyle(padding)));
        }
        return results;
      });
    });
    describe('#skew()', function() {
      it('should skew an element to a given angle', function() {
        testMaskew.skew(20);
        return expect(getRotation(testMaskew._innerMask)).to.equal(20);
      });
      it('should keep inner contents upright', function() {
        return expect(getRotation(testMaskew._holder)).to.equal(-20);
      });
      it('should shift contents within the view mask based on angle', function() {
        expect(getY(testMaskew._innerMask)).to.equal(-72);
        testMaskew.skew(10);
        return expect(getY(testMaskew._innerMask)).to.equal(-39);
      });
      it('should narrow the mask width based on the given angle', function() {
        expect(parseInt(testMaskew._innerMask.style.width, 10)).to.equal(201);
        testMaskew.skew(30);
        return expect(parseInt(testMaskew._innerMask.style.width, 10)).to.equal(139);
      });
      it('should shorten the mask height based on the given angle', function() {
        expect(parseInt(testMaskew._outerMask.style.height, 10)).to.equal(139);
        testMaskew.skew(5);
        return expect(parseInt(testMaskew._outerMask.style.height, 10)).to.equal(220);
      });
      return it('should revert to 0 degrees when given a negative angle', function() {
        testMaskew.skew(-20);
        return expect(getRotation(testMaskew._innerMask)).to.equal(0);
      });
    });
    describe('#destroy()', function() {
      var el;
      el = testMaskew._outerMask;
      it('should remove the Maskew element from the document', function() {
        testMaskew.destroy();
        return expect(testPresence(el)).to.equal(false);
      });
      return it('should set all the object attributes to null', function() {
        var allNull;
        allNull = (function() {
          var k, v;
          for (k in testMaskew) {
            v = testMaskew[k];
            if (v !== null) {
              return false;
            }
          }
          return true;
        })();
        return expect(allNull).to.equal(true);
      });
    });
    return describe('#$.fn.maskew()', function() {
      var $testMaskew;
      $testMaskew = $('.maskew-test2').maskew();
      it('should return a jQuery object', function() {
        return expect($testMaskew instanceof jQuery).to.equal(true);
      });
      it('should stash a reference to the Maskew instance in the data cache', function() {
        return expect($testMaskew.maskew()).to.equal($testMaskew.maskew());
      });
      it('should return its Maskew instance by calling it with no arguments', function() {
        return expect($testMaskew.maskew() instanceof Maskew).to.equal(true);
      });
      return it('should proxy Maskew methods as string arguments', function() {
        $testMaskew.maskew('skew', 5);
        expect(parseInt($testMaskew.maskew()._outerMask.style.height, 10)).to.equal(220);
        $testMaskew.maskew('setTouch', true);
        return expect($testMaskew.maskew()._outerMask.style.cursor).to.equal('ew-resize');
      });
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
